Lesson 28 (Submit Events):

Now we're tracking what a user types or selects inside this form next we wanna handle the form being submited and eventually do something with this data, now when a button is pressed inside a form it fires a submit event on the form itself so we can listen for this submit event and react to it, now another option would be to attach a click event to the button itself and react to that instead but we prefer to react to the submit event so what we're gonna to attach that in the form in `Create` component.

Create.js
---------
import { useState } from "react";

const Create = () => {
  const [title, setTitle] = useState("");
  /* lesson 27: Creating state for body and author */
  const [body, setBody] = useState("");
  const [author, setAuthor] = useState("mario");

  const handleSubmit = (e) => {
    e.preventDefault();
    const blog = { title, body, author };
    console.log(blog);
  };
  return (
    <div className="create">
      <h2>Add a new blog</h2>
      {/* lesson 28: now we'll set this onSubmit equal to something, which is a function that we'll create up, that is handleSubmit in here we'll take the event object `e` as parameter that we have access to and we're gonna reference this function handleSunmit as `onSubmit={handleSubmit}`, so inside this handleSubmit we want to prevent the default action of the form being submitted now that default action is for the page to refresh, if we click the `Add blog` button right now it'll refresh the page, we don't want that to happen, So in order to prevent that we take this event object(e) and use a method called `preventDefault` on that and that prevents the page from being refreshing. We can check in the browser by clicking the `Add blog` button in the browser now we're going to create the blog object an blog object and blog objet ultimately going to be the thing that is saved in the db.json file, this object is going to have title, body, and author property when we're using json-server we don't need to give the id property cause later when we make a post request json-server will automatically add an unique id for us, so we don't need to create that, so we're gonna now create a new object inside `handleSubmit` called blog and set it equal to an object where we add in the title, body, and also the author. So this object will have the state variables as properties that we are taking from the input and updating the state variables themselves. Then we can log this blog object to the console to see it. So we can check now the blog object being logged in the browser console. So now we are reacting to this submit event we're preventing the dafault action which is the page refreshing. Next up we want to send a post request to a particular endpoint that json server provides us with, so we can add this new object that is `blog` to our data (db.json file) and we'll do that next */}
      <form onSubmit={handleSubmit}>
        <label>Blog title:</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <label>Blog body:</label>
        <textarea
          value={body}
          onChange={(e) => setBody(e.target.value)}
          required
        ></textarea>
        <label>Blog author:</label>
        <select value={author} onChange={(e) => setAuthor(e.target.value)}>
          <option value="mario">mario</option>
          <option value="yoshi">yoshi</option>
          <option value="luigi">luigi</option>
        </select>
        <button>Add blog</button>
      </form>
    </div>
  );
};

export default Create;
