We have seen useState hook that is used to create some state for the component. But there is many other hooks that we can use in React. One such is useEffect - this hook runs a function at every render of the componentns, remember the component renders initially when it first loads and the rendering also happens when the state changes it re renders the dom so we can update that state in the browser, so this useEffect hook is a way to run code on every render and that can be useful for many differednt reasons which we're going to see later on, now focus on how can we use it. 

First thing to do import it from react - (import { useState, useEffect } from "react")

Home.js
-------
import { useState, useEffect } from "react";
import BlogList from "./BlogList";

const Home = () => {
  const [blogs, setBlogs] = useState([
    { title: "My new website", body: "lorem ipsum...", author: "mario", id: 1 },
    { title: "Welcome party!", body: "lorem ipsum...", author: "yoshi", id: 2 },
    {
      title: "Web dev top tips",
      body: "lorem ipsum...",
      author: "mario",
      id: 3,
    },
  ]);

  const handleDelete = (id) => {
    const newBlogs = blogs.filter((blog) => blog.id !== id);
    setBlogs(newBlogs);
  };

  /* use useEffect hook - we don't store it inside a constant it doesn't return anything all we need to do is pass as an argument a function, this function the function that's going to run every time there is a re-render so once initially when the component first loads but thereafter anytime the data changes, normally in this function inside useEffect we could do something like fetch data or communicate with some kind of authentication service and those things are known as side effects in react, but for now awe are doing simple console.log, if we see in browser console we can observe useEffect ran on refresh and when we delete a blog(chaging the data (state) (re-rendering)) so useEffect runs on every render. We can also access the state inside useEffect, so if we wanted to output the blogs we can do 'console.log(blogs)' inside useEffect. If we inspect the browser console we can see the blogs data on every render as useEffect runs, Need to be careful about changing the state inside useEffect because because we could end up in a loop of continuos renders (e.g. setting state insde useEffect 'setBlogs(newBlogs)') ðŸ˜…. In this scenario, Initially the component renders to the DOM  which will trigger useEffect function to run that would then update the state and the state(data) would change and that would trigger a re-render on that re-render again that triggers this function in useEffect to run and this goes on again and again creating a endless loop, there are ways to fix it which we will see later */

  useEffect(() => {
    console.log("useEffect ran");
    console.log(blogs);
  });

  return (
    <div className="home">
      <BlogList blogs={blogs} title="All Blogs!" handleDelete={handleDelete} />
    </div>
  );
};

/* Conclusion: This useEffect hook is really really useful for running any kind of code that we need to run at every render. It can be used for things like fetching data we're gonna see that later. Next up we gonna look at dependencies of useEffect */
export default Home;
--------------------------------------------------------------------------------