Full Transcript:
All right then, so in the last lesson we saw that we could use this useEffect hook to fire a function after every render. So, that would happen once initially when the component first loads, but thereafter every time the state changes and we re-render the template. So, that's going to fire that function after every render. But you don't always want to run a function after every single render, maybe only a certain renders. Now, to do that, we can use something called a dependency array. This is basically an array that we can pass into this useEffect hook as a second argument, like this. So let's just first of all pass in an empty array and see what this does. I'm going to save this and come to the browser, inspect, and go to console. I'm going to refresh over here and we can see useEffect ran. So it still ran initially on the first render of the components. But if we now click "Delete Blog," we're not seeing this run again. So what this does, an empty dependency array, is make sure that this hook right here only runs the function after the first initial render. Thereafter, if the state changes, it won't run the function again. It only runs it once. So this is good if you only need to run the function once on the first render. Another option is to add actual dependencies to this array. By that, I mean any state values that should trigger the useEffect function to run when they change. So to demonstrate this, I'm going to create another piece of state. Let me do that below this state. I'm going to say const and we'll call this bit of state name. Also, create a function called setName and we set that equal to useState and the initial value of this will be Mario. Okay, so now I want to be able to change this state. And to do that, we'll just do a button at the bottom over here. So, button and we'll say "Change Name" inside that button. Now, we want to attach a click event to this. On click is equal to a function. It will be an anonymous function which then invokes the setName right here. So, setName and we can pass in a new name which is going to be Luigi. Alright, so also I'm going to output the name at the bottom. I'll just do a paragraph tag and then say "Name." So if I save this, at the minute we can see over here that if we click on this it changes it to Luigi. Now imagine I want to run this useEffect at the beginning when the component first renders, but also whenever a certain value changes, this one right here. So, I want to run this function if this state changes. If this state changes, I don't want to run a function, only this one. So, the name becomes a dependency that we add into this second argument. So, let me put that in, name. Now, useEffect is going to watch this value and if it changes, it will run the function. So, I'm going to get rid of this where we log out the blogs and I'll instead log out this, but also I'll log out the name. So, we'll say console.log name. Okay, so now if I save this and preview over here, I'm going to refresh to begin with and we see useEffect run and Mario. So, it still runs the function on first render. Now, if we click one of these, it doesn't run the function because these blogs are not a dependency, they're not in this dependency array. But if we change the name, then it does run the function right here. Okay, so the name is a dependency and when it changes, we run the function. If I click on this again, we don't see it run again because although this is using the setName function to change the state, it's not actually changing the value anymore because it's already Luigi at this point. So, the state isn't changing and we're not triggering that re-render, and therefore this right here is not running. Okay, but anyway, that's how we can use dependencies, this dependency array right here as a second argument to useEffect, to control when this function runs.