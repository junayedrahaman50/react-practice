Lesson 29 (Making a post request):

Now we can submit the form and create this blog objects, the next step is to make a post request to json server to add that data to our data file so we're not gonna use the useFetch hook this time we could probably edit this so we can handle post requests as well and make a more universal hook but we don't want do that instead we're just gonna make the post request inside this handleSubmit function in `Create` component cause we're only gonna make that request once in the whole application(will not be reusing) and not in different places. First of all we're going to delete the consol.log(blog) in handleSubmit function.

Create.js
---------
import { useState } from "react";

const Create = () => {
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");
  const [author, setAuthor] = useState("mario");
  const [isPending, setIsPending] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    const blog = { title, body, author };
    /* leeson 29 (read second): So let's inside here set isPending to true */
    setIsPending(true);

    /* lesson 29 (read first): we're gonna make a fetch request using the fetch api and this is gonna be to the same endpoint as the get request to get all the blogs so copy the endpoint from the `Home` component where we're showing/fetching all blogs. Now we will add in 2nd argument in this fetch that is where we add the data and also define the type of request we're sending here that is the method, this is gonna be a post request so the method is post, we also need the headers property and that is so we can the content type is being sent, so let's say `headers: { "Content-Type": "application/json" }` so this is basically telling the server the type of content that we're sending with this request, we're sending json data, now the next property is the body which is the actual data we're sending with this request and that data is going to be the `blog` object defined up☝🏻. But we don't just say blog first of all we've to turn this from an object into a json string to do that we use the `JSON` object and then we use the methid `stringify` and we pass in the object we want to turn into a json string and that is the `blog` and that's pretty much it. So this will then make a post request to this endpoint which is the endpoint we need to make a post request to add in a new blog and that will add a new blog for us and json server will automatically add the `id` property as well now since this is asynchronus and it returns a promise we can add a then method which fires a function when the fetch is complete (the whole post request thing in fetch) and logs a string in console. So let's test this. So we fill in the form submit and we'll see the blog being added in the `Home` component. So that works but we also want to add a loading state when we add the blog and it says in the button something like loading so let's try that we're going to create another piece of state up here☝🏻, that is isPending as in useFetch hook and we're gonna set this to useState and to begin with it's gonna be false cause when we first load the page we're not making that request straight away, it's only when we try to submit the form so that's right here in handleSubmit function were we're making the request   */
    setTimeout(() => {
      fetch("http://localhost:8000/blogs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(blog),
      }).then(() => {
        /* lesson 29 (read third): At this point down here we want to set it equal to false when it's compoleted, so we can set isPending to false. Okay then what we like to do is to output one button if isPending is false and that's the `Add blog` button and a different one if isPending is true cause at that point we're gonna show something like loading in button or maybe make it disabled so we can't click it */
        setIsPending(false);
        console.log("new blog added!");
      });
    }, 1000);
  };
  return (
    <div className="create">
      <h2>Add a new blog</h2>
      <form onSubmit={handleSubmit}>
        <label>Blog title:</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <label>Blog body:</label>
        <textarea
          value={body}
          onChange={(e) => setBody(e.target.value)}
          required
        ></textarea>
        <label>Blog author:</label>
        <select value={author} onChange={(e) => setAuthor(e.target.value)}>
          <option value="mario">mario</option>
          <option value="yoshi">yoshi</option>
          <option value="luigi">luigi</option>
        </select>
        {/* lesson 29 (read fourth): So we're gonna surround this button in curly braces and we're gonna say !isPending. So this is only gonna output when `isPending` is false. When isPending is false the negation will make it true the button will show in the browser  */}
        {/* {!isPending && <button>Add blog</button>} */}
        {/* lesson 29 (read fifth): So if isPending is true we're gonna output the disabled button, and we're gonan say Adding blog... in it */}
        {/* {isPending && <button disabled>Adding blog...</button>} */}
        {/* lesson 29 (read sixth): Alternatively, we can use a ternary operator. condition ? trueExpression (if condition true) : falseExpression (if condition false) */}
        {isPending ? (
          <button disabled>Adding blog...</button>
        ) : (
          <button>Add blog</button>
        )}
      </form>
    </div>
  );
};

/* lesson 29: Conclusion: So now everything works, but it will be nice if we redirect the user to the homepage `Home` component after the blog has been added and we'll see how to do these redirect next */
export default Create;
------------------------------------------------------------------------------------
index.css   
---------
/* Lesson 29: target the disabled button and make it gray color */

.create form button:disabled {
  background-color: #868e96;
}
------------------------------------------------------------------------------------
useFetch.js (custom hook) - error fix
-------------------------
/* lesson 29: fixed an error made by net ninja, he passed true as "true" which was a truthy string value which make this error undetected fixed in below line */
const [isPending, setIsPending] = useState(true);