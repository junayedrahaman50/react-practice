State of an component means data being used on that component in a particular time.
It could be array of values, booleans, string, objects or any other data that our component uses.

We created some variables and used them in our template before (refer to React Practice.pdf App.js file) but if we need to change variable or data over time or in reaction to some event (user clicking a button)


Home.js ( Before using useState Hook ):
----------------------------------------------------------------------------------
// Destructure useState hook from react library, this grabs us the function from the react library, now we can use it in our component
import { useState } from "react";

const Home = () => {
  let name = "Mario";
  const handleClick = () => {
    // Updationg the will not reflect in the template
    name = "Luigi";
    /* name itself changed to luigi but it doesn't get updated in the template (view in browser console) cause the variable we have created is not reactive (let name = "Mario") means react doesn't watch it for changes, when its value changes it doesn't trigger react to re-render the template with the new value inside it (name variable in this case) and we continue to see the old value (Mario) in the browser, to make this work we need to make the value reactive so that when it changes react detects that and it re-renders the template with the new value (where we output it in the template) and updated value is visible to the browser to implement this we use hook whis is called useState(). Hook in react is a special type of function that does a certain job, it generally starts with the word use. useState hook provides us a way to make reactive value, also provides a way to change that value whenever we want. So to use useState hook we need to import it  */
    console.log(name);
  };

  // const handleClickAgain = (name, e) => {
  //   console.log(`Hello ${name}!, ${e.target}`);
  // };

  return (
    <div className="home">
      <h2>Homepage</h2>

      <p>{name}</p>
      {/* onclicking button change the value of name variable */}
      <button onClick={handleClick}>Click me!</button>
      {/* <button onClick={(e) => handleClickAgain("Mario", e)}>
        Click me again!
      </button> */}
    </div>
  );
};

export default Home;
------------------------------------------------------------------------------------------

Home.js ( After using useState Hook ):
------------------------------------------------------------------------------------------
// Destructure useState hook from react library, this grabs us the function from the react library, now we can use it in our component
import { useState } from "react";

const Home = () => {
  // let name = "Mario";
  // Make a reactive value using useState, we give this useState a initial value for example (Mario), we want to store this in some variable. We use array destructuring to grab 2 values that this hook returns to us, first value is the initial value (name), 2nd value is a function that we can use to change that value most times it's called set[whatever the name of value to be changed]
  const [name, setName] = useState("Mario");
  const [age, setAge] = useState(23);
  const handleClick = () => {
    /* changing the state data using setName, this useState value is reactive if we change it it's gonna change in the template as well, when we use this function to change the value that triggers react to re-render the component upon re-rendering it has the new value of name cause it's been updated. We can use this hook (useState) as many times in our component for different values other than name like it can be array, object, boolean etc. like 'const [age, setAge] = useState(0)' The data type of state we are using doesn't matter */
    setName("Luigi");
    // upadte age to 30
    setAge(30);
  };

  return (
    <div className="home">
      <h2>Homepage</h2>
      {/* At first it will give us the initial value (Mario), to change this value we can use the setName function */}
      <p>
        {name} is {age} years old.
      </p>
      <button onClick={handleClick}>Click me!</button>
    </div>
  );
};

/* Conclusion: When we need a reactive value something that might change at some point we use the useState hook to do that we pass in an initial value and we can output that value in the template and then we just call the set function 2nd value we get in the destructured array to update it and that triggers re-render and the new vslue is going to be output to the browser in this template, so this hook is very useful ðŸ˜„ */

export default Home;
------------------------------------------------------------------------------------------
