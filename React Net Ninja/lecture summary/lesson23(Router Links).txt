Lesson 23 (Router Links):

We have set up multiple different routes now for '/' and '/create' but when we click on these links to those different routes it's still currently sending a fresh request to the server for a new page, we get the same html page (that is blank) back each time and then react is injecting the correct content but we know react router can intercept those requests and just handle the content changes in the browser instead and it can do but to do it we need to use a special link tag so let's go to the `Navbar` component and try to use this, first thing we need to do is to import this link tag from react.

Navbar.js
---------
// Component is just a function which returns jsx template and the exported at the bottom of file
// sfc (stateless functional component) press tab
/* lesson 23: Importing link tag from react, destructure the link component from react-router-dom to handle new page requests in the browser (react router intercepts these request to the server ) thus making no requet to the server for new pages.  */
import { Link } from "react-router-dom";

const Navbar = () => {
  return (
    <nav className="navbar">
      <h1>The Dojo Blog</h1>
      <div className="links">
        {/* We are currently using anchor(a) tags but if we want react to handle the routing only in the browser and to intercept those requests for new pages we need to replace this with `Link` instead `<Link></Link>` now a `Link` component doesn't have href like an anchor tag instead it uses `to`. So now we're saying we want to link to '/' and '/create'. So at the end of the day when react renders all this to the browser we still will see anchor tags and we can see that in browser inspecting elements, so when clicked on (the navbar buttons tha go to below routes üëáüèª ) they still try to send a request to the server for a new page however built into these link tags is a special functionality and that is for react router to have the ability to prevent that request to the server and then instead it just looks at the url or the path where we are going to and then it matches that against one of our routes defined in App.js (App/Root component) and it tries to inject whatever content that we need because we don't really need the server to resend back the html page doesn't make much sense. Now if we see it in the browser it is much quicker than sending a fresh request every time we want a new page to the server, but one thing to notice (lesson 23, time: 2:40 - 3:30): Let us go to '/' homepage and refresh, from Home to New blog if we go quickly we then get an error and it says warning can't perform a react state update on an unmounted component, now this is to do with our custom fetch hook which is still running in the home page ('Home' component). It's still running in the background even though we've gone to a new page over here and it's trying to update the state of our `Home` component after it's been unmounted from the DOM and replaced with this `Create` component. Now we are gonna see how to combat this error using a cleanup function in our `useEffect` hook next */}
        <Link to="/">Home</Link>
        <Link to="/create">New Blog</Link>
      </div>
    </nav>
  );
};

export default Navbar;
